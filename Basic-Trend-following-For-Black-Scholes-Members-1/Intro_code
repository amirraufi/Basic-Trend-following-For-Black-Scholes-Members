import pandas as pd
import numpy as np
import yfinance as yf
from scipy.stats import skew
import matplotlib.pyplot as plt

# Function to calculate the annualised Sharpe ratio
def annualised_sharpe_ratio(ret, std):
    return 16 * (ret / std)

# Dictionary of tickers for financial instruments
tickers = {
    "Gold": "GC=F",
    "Treasury": "ZN=F",
    "GBPUSD": "GBPUSD=X",
    "S&P500": "ES=F"
}

# Function to download data for a given ticker
def download_data(ticker, start_date="2004-01-01", end_date="2024-09-18"):
    data = yf.download(ticker, start=start_date, end=end_date)
    data.dropna(inplace=True)
    return data

# Downloading data for each instrument in the tickers dictionary
data = {name: download_data(ticker) for name, ticker in tickers.items()}

# Function to compute EWMA (Exponential Weighted Moving Average) with a given window
def ewma(data, window):
    return data.ewm(span=window, adjust=False).mean()

# Function to generate EWMA values for different windows
def exponential_momentum_generator(x):
    x['EWMA_2'] = ewma(x['Close'], 2)
    x['EWMA_4'] = ewma(x['Close'], 4)
    x['EWMA_8'] = ewma(x['Close'], 8)
    x['EWMA_16'] = ewma(x['Close'], 16)
    x['EWMA_32'] = ewma(x['Close'], 32)
    x['EWMA_64'] = ewma(x['Close'], 64)
    x['EWMA_128'] = ewma(x['Close'], 128)
    x['EWMA_256'] = ewma(x['Close'], 256)

# Applying EWMA calculations to the Gold data
gold = data["Gold"]
exponential_momentum_generator(gold)

# Function to generate trading signals based on EWMA crossovers
def EWMA_Signal(x):
    x['Signal_2_8'] = np.where(x['EWMA_2'] > x['EWMA_8'], 1, -1)
    x['Signal_4_16'] = np.where(x['EWMA_4'] > x['EWMA_16'], 1, -1)
    x['Signal_8_32'] = np.where(x['EWMA_8'] > x['EWMA_32'], 1, -1)
    x['Signal_16_64'] = np.where(x['EWMA_16'] > x['EWMA_64'], 1, -1)
    x['Signal_32_128'] = np.where(x['EWMA_32'] > x['EWMA_128'], 1, -1)
    x['Signal_64_256'] = np.where(x['EWMA_64'] > x['EWMA_256'], 1, -1)

# Generate signals for Gold
EWMA_Signal(gold)

# Calculate strategy returns based on signals
gold['Strategy_returns'] = gold['Signal_8_32'] * gold['Close'].pct_change()

# Calculate skewness, standard deviation, and annualised Sharpe ratio
mean_return = gold['Strategy_returns'].mean()
strategy_std = gold['Strategy_returns'].std()
sharpe_ratio = annualised_sharpe_ratio(mean_return, strategy_std)
strategy_skewness = skew(gold['Strategy_returns'].dropna())

# Display metrics in a table format
metrics_df = pd.DataFrame({
    'Mean Return': [mean_return],
    'Standard Deviation': [strategy_std],
    'Annualised Sharpe Ratio': [sharpe_ratio],
    'Skewness': [strategy_skewness]
})
print("EWMAC Strategy Metrics:")
print(metrics_df)

# Plotting Gold Close Price with EWMA lines for 8 and 32 periods
plt.figure(figsize=(14, 7))
plt.plot(gold['Close'], label='Gold Close Price', color='blue')
plt.plot(gold['EWMA_8'], label='EWMA 8', color='orange')
plt.plot(gold['EWMA_32'], label='EWMA 32', color='green')
plt.title("Gold Close Price with EWMA (8 and 32)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend(loc='upper left')
plt.show()
returns_data = gold['Strategy_returns'].dropna()

# Plot histogram for the distribution of returns
plt.figure(figsize=(10, 6))
plt.hist(returns_data, bins=50, color='skyblue', edgecolor='black')
plt.title("Distribution of Strategy Returns")
plt.xlabel("Return")
plt.ylabel("Frequency")
plt.show()
